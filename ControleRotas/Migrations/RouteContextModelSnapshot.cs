// <auto-generated />
using System;
using ControleRotas.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ControleRotas.Migrations
{
    [DbContext(typeof(RouteContext))]
    partial class RouteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ControleRotas.Models.Agenda", b =>
                {
                    b.Property<int>("AgendaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Compromisso");

                    b.Property<DateTime>("DataAlteracao");

                    b.Property<DateTime>("DataInativacao");

                    b.Property<DateTime>("DataInclusao");

                    b.Property<string>("NomeCompromisso")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int?>("PessoaId");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(6, 2)");

                    b.HasKey("AgendaId");

                    b.HasIndex("PessoaId");

                    b.ToTable("Agenda");
                });

            modelBuilder.Entity("ControleRotas.Models.Email", b =>
                {
                    b.Property<int>("EmailId");

                    b.Property<string>("EndEmail");

                    b.Property<int?>("PessoaId");

                    b.HasKey("EmailId");

                    b.HasIndex("PessoaId");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("ControleRotas.Models.Endereco", b =>
                {
                    b.Property<int>("EnderecoId");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("Complemento");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Numero");

                    b.Property<int?>("PessoaId");

                    b.HasKey("EnderecoId");

                    b.HasIndex("PessoaId");

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("ControleRotas.Models.Funcionario", b =>
                {
                    b.Property<int>("FuncionarioId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cargo");

                    b.Property<string>("NivelAcesso")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasDefaultValue("0");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("TrocarSenha");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("FuncionarioId");

                    b.ToTable("Funcionario");
                });

            modelBuilder.Entity("ControleRotas.Models.Municipio", b =>
                {
                    b.Property<int>("EnderecoId");

                    b.Property<int>("CodIbge")
                        .HasMaxLength(20);

                    b.Property<string>("Nome");

                    b.Property<string>("Uf")
                        .IsRequired();

                    b.HasKey("EnderecoId");

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("ControleRotas.Models.OrdemServico", b =>
                {
                    b.Property<int>("OrdemServicoId");

                    b.Property<decimal?>("Acrescimo")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<string>("Ativo")
                        .IsRequired();

                    b.Property<DateTime>("DataAlteracao");

                    b.Property<DateTime>("DataExclusao");

                    b.Property<DateTime>("DataInclusao");

                    b.Property<DateTime>("DataPagamento");

                    b.Property<decimal?>("Desconto")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<int?>("EndBaseEnderecoId");

                    b.Property<int?>("EndDestinoEnderecoId");

                    b.Property<int?>("EndOrigemEnderecoId");

                    b.Property<string>("KmPercorrida");

                    b.Property<string>("NfSeMotorista");

                    b.Property<string>("NumOs");

                    b.Property<string>("Observacao");

                    b.Property<string>("Passageiro");

                    b.Property<string>("SituacaoServico")
                        .IsRequired();

                    b.Property<int?>("SolicitantePessoaId");

                    b.Property<string>("Urgencia")
                        .IsRequired();

                    b.Property<decimal?>("ValorCobrado")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<decimal?>("ValorPedagio")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<decimal?>("ValorTotal")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<int?>("VeiculoId");

                    b.HasKey("OrdemServicoId");

                    b.HasIndex("EndBaseEnderecoId");

                    b.HasIndex("EndDestinoEnderecoId");

                    b.HasIndex("EndOrigemEnderecoId");

                    b.HasIndex("SolicitantePessoaId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("OrdemServico");
                });

            modelBuilder.Entity("ControleRotas.Models.Pessoa", b =>
                {
                    b.Property<int>("PessoaId");

                    b.Property<string>("Cpf_Cnpj")
                        .HasMaxLength(14);

                    b.Property<DateTime>("DataAlteracao");

                    b.Property<DateTime>("DataExclusao");

                    b.Property<DateTime>("DataInclusao");

                    b.Property<string>("Grupo");

                    b.Property<string>("Ie_Rg")
                        .HasColumnName("Inscr. Estadual")
                        .HasMaxLength(20);

                    b.Property<string>("InscrMunicipal")
                        .HasColumnName("Inscr. Municipal");

                    b.Property<DateTime>("Nascimento");

                    b.Property<string>("NomeComp")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("RazaoSocial");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("TipoContrante")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("TipoPessoa")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("PessoaId");

                    b.ToTable("Pessoa");
                });

            modelBuilder.Entity("ControleRotas.Models.Telefone", b =>
                {
                    b.Property<int>("TelefoneId");

                    b.Property<string>("NumTelefone");

                    b.Property<int?>("PessoaId");

                    b.Property<string>("TipoTelefone")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.HasKey("TelefoneId");

                    b.HasIndex("PessoaId");

                    b.ToTable("Telefone");
                });

            modelBuilder.Entity("ControleRotas.Models.Veiculo", b =>
                {
                    b.Property<int>("VeiculoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ano");

                    b.Property<DateTime>("DataAlteracao");

                    b.Property<DateTime>("DataExclusao");

                    b.Property<DateTime>("DataInclusao");

                    b.Property<int>("Disponivel");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("Modelo");

                    b.Property<string>("Placa");

                    b.Property<string>("Renavan");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.HasKey("VeiculoId");

                    b.ToTable("Veiculo");
                });

            modelBuilder.Entity("ControleRotas.Models.Agenda", b =>
                {
                    b.HasOne("ControleRotas.Models.Pessoa")
                        .WithMany("Agendas")
                        .HasForeignKey("AgendaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControleRotas.Models.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaId");
                });

            modelBuilder.Entity("ControleRotas.Models.Email", b =>
                {
                    b.HasOne("ControleRotas.Models.Pessoa")
                        .WithMany("Emails")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControleRotas.Models.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaId");
                });

            modelBuilder.Entity("ControleRotas.Models.Endereco", b =>
                {
                    b.HasOne("ControleRotas.Models.Pessoa")
                        .WithMany("Enderecos")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControleRotas.Models.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaId");
                });

            modelBuilder.Entity("ControleRotas.Models.Municipio", b =>
                {
                    b.HasOne("ControleRotas.Models.Endereco", "Endereco")
                        .WithOne("Municipio")
                        .HasForeignKey("ControleRotas.Models.Municipio", "EnderecoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ControleRotas.Models.OrdemServico", b =>
                {
                    b.HasOne("ControleRotas.Models.Endereco", "EndBase")
                        .WithMany()
                        .HasForeignKey("EndBaseEnderecoId");

                    b.HasOne("ControleRotas.Models.Endereco", "EndDestino")
                        .WithMany()
                        .HasForeignKey("EndDestinoEnderecoId");

                    b.HasOne("ControleRotas.Models.Endereco", "EndOrigem")
                        .WithMany()
                        .HasForeignKey("EndOrigemEnderecoId");

                    b.HasOne("ControleRotas.Models.Agenda", "Agenda")
                        .WithOne("OrdemServico")
                        .HasForeignKey("ControleRotas.Models.OrdemServico", "OrdemServicoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControleRotas.Models.Pessoa", "Solicitante")
                        .WithMany()
                        .HasForeignKey("SolicitantePessoaId");

                    b.HasOne("ControleRotas.Models.Veiculo", "Veiculo")
                        .WithMany()
                        .HasForeignKey("VeiculoId");
                });

            modelBuilder.Entity("ControleRotas.Models.Pessoa", b =>
                {
                    b.HasOne("ControleRotas.Models.Funcionario", "Funcionario")
                        .WithOne("Pessoa")
                        .HasForeignKey("ControleRotas.Models.Pessoa", "PessoaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ControleRotas.Models.Telefone", b =>
                {
                    b.HasOne("ControleRotas.Models.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaId");

                    b.HasOne("ControleRotas.Models.Pessoa")
                        .WithMany("Telefones")
                        .HasForeignKey("TelefoneId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
